import time  # Imports the time module for working with timestamps
import copy  # Imports the copy module for creating deep copies of objects

class Block():
    def __init__(self, transactions, lastHash, forger, blockCount):
        """
        Initializes a new block in the blockchain.

        :param transactions: List of transactions included in the block
        :param lastHash: Hash of the previous block in the chain
        :param forger: The forger (miner) who created this block
        :param blockCount: Total number of blocks in the chain up to this block
        """
        self.blockCount = blockCount  # The block number in the chain
        self.transactions = transactions  # Transactions included in this block
        self.lastHash = lastHash  # Hash of the previous block
        self.timestamp = time.time()  # Time when the block was created (current timestamp)
        self.forger = forger  # Identifier of the forger who created this block
        self.signature = ''  # Digital signature for the block, initially empty

    @staticmethod
    def genesis():
        """
        Creates the genesis block (the first block in the blockchain).

        The genesis block serves as the starting point of the blockchain and
        has predefined values, including a specific hash and a zero timestamp.

        :return: An instance of the genesis block
        """
        # Creates the genesis block with default values
        genesisBlock = Block([], 'genesisHash', 'genesis', 0)
        genesisBlock.timestamp = 0  # Sets the genesis block's timestamp to 0
        return genesisBlock  # Returns the genesis block

    def toJson(self):
        """
        Converts the block into a JSON-like dictionary representation.

        This representation includes all essential details of the block,
        such as its transactions, hash, timestamp, and signature.

        :return: A dictionary representing the block
        """
        data = {}  # Initializes a dictionary to store block data
        data['blockCount'] = self.blockCount  # Adds the block's count number
        data['lastHash'] = self.lastHash  # Adds the hash of the previous block
        data['signature'] = self.signature  # Adds the block's signature
        data['forger'] = self.forger  # Adds the forger's identifier
        data['timestamp'] = self.timestamp  # Adds the block's timestamp
        jsonTransactions = []  # List to store transactions in JSON format
        
        # Converts each transaction to JSON and appends it to the list
        for transaction in self.transactions:
            jsonTransactions.append(transaction.toJson())
        
        data['transactions'] = jsonTransactions  # Adds the list of transactions to the dictionary
        return data  # Returns the dictionary representing the block

    def payload(self):
        """
        Creates a representation of the block without its signature.

        This payload is useful for operations where the signature should not be included,
        such as verifying the block's integrity or generating a new signature.

        :return: A dictionary with block data, excluding the signature
        """
        jsonRepresentation = copy.deepcopy(self.toJson())  # Creates a deep copy of the block's JSON representation
        jsonRepresentation['signature'] = ''  # Clears the signature field in the copy
        return jsonRepresentation  # Returns the representation without the signature

    def sign(self, signature):
        """
        Adds a digital signature to the block.

        The signature is typically generated by the forger to ensure
        the authenticity and integrity of the block.

        :param signature: The digital signature to be added to the block
        """
        self.signature = signature  # Sets the block's signature
